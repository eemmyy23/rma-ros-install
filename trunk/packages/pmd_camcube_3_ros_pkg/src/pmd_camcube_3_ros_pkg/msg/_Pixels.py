"""autogenerated by genmsg_py from Pixels.msg. Do not edit."""
import roslib.message
import struct


class Pixels(roslib.message.Message):
  _md5sum = "25405a9889a230a21c04df203440f575"
  _type = "pmd_camcube_3_ros_pkg/Pixels"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8[] Pixels
float32 maxDist
uint8 maxPixel
uint8 width
uint8 height

"""
  __slots__ = ['Pixels','maxDist','maxPixel','width','height']
  _slot_types = ['uint8[]','float32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       Pixels,maxDist,maxPixel,width,height
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Pixels, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Pixels is None:
        self.Pixels = ''
      if self.maxDist is None:
        self.maxDist = 0.
      if self.maxPixel is None:
        self.maxPixel = 0
      if self.width is None:
        self.width = 0
      if self.height is None:
        self.height = 0
    else:
      self.Pixels = ''
      self.maxDist = 0.
      self.maxPixel = 0
      self.width = 0
      self.height = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.Pixels
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3B.pack(_x.maxDist, _x.maxPixel, _x.width, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.Pixels = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.maxDist, _x.maxPixel, _x.width, _x.height,) = _struct_f3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.Pixels
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_f3B.pack(_x.maxDist, _x.maxPixel, _x.width, _x.height))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.Pixels = str[start:end]
      _x = self
      start = end
      end += 7
      (_x.maxDist, _x.maxPixel, _x.width, _x.height,) = _struct_f3B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_f3B = struct.Struct("<f3B")
